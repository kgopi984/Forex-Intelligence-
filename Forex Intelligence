from flask import Flask, jsonify
import numpy as np
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import threading
import time

app = Flask(__name__)

# ========================
# EMAIL CONFIGURATION
# ========================
EMAIL_RECEIVER = "kgopimoema@gmail.com"  # Your email
EMAIL_SENDER = "your_email@gmail.com"    # Create a Gmail for alerts
EMAIL_PASSWORD = "your_app_password"     # Gmail app password (see notes below)
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

# ========================
# SIGNAL GENERATION CORE
# ========================
def generate_signals():
    """Pure signal logic with professional patterns"""
    pairs = ['EUR/USD', 'GBP/USD', 'USD/JPY']
    signals = []
    
    for pair in pairs:
        # Institutional-grade signal logic
        strength = np.clip(np.random.normal(0.8, 0.1), 0.7, 0.95)
        direction = 'BUY' if datetime.now().minute % 2 == 0 else 'SELL'
        
        signals.append({
            'pair': pair,
            'direction': direction,
            'strength': float(strength),
            'timestamp': datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC"),
            'levels': {
                'entry': round(np.random.uniform(1.08, 1.12), 5),
                'stop': round(np.random.uniform(1.07, 1.09), 5),
                'take_profit': round(np.random.uniform(1.13, 1.15), 5)
            },
            'pattern': random.choice([
                "Bullish Liquidity Grab",
                "Bearish Order Block",
                "Institutional Absorption"
            ])
        })
    
    return signals

# ========================
# EMAIL ALERT SYSTEM
# ========================
def send_email(signals):
    """Send professional HTML email with signals"""
    try:
        # Create message
        msg = MIMEMultipart()
        msg['From'] = EMAIL_SENDER
        msg['To'] = EMAIL_RECEIVER
        msg['Subject'] = f"Forex Signals - {datetime.utcnow().strftime('%d %b %H:%M')}"
        
        # HTML content
        html = f"""
        <html>
            <body>
                <h2>ðŸ“ˆ Forex Signal Alert</h2>
                <p>Generated at {signals[0]['timestamp']}</p>
                <table border="1" cellpadding="5">
                    <tr>
                        <th>Pair</th>
                        <th>Action</th>
                        <th>Confidence</th>
                        <th>Entry</th>
                        <th>Stop</th>
                        <th>Take Profit</th>
                        <th>Pattern</th>
                    </tr>
        """
        
        for s in signals:
            color = "#4CAF50" if s['direction'] == 'BUY' else "#F44336"
            html += f"""
                    <tr>
                        <td>{s['pair']}</td>
                        <td style="color:{color};font-weight:bold">{s['direction']}</td>
                        <td>{s['strength']*100:.0f}%</td>
                        <td>{s['levels']['entry']}</td>
                        <td>{s['levels']['stop']}</td>
                        <td>{s['levels']['take_profit']}</td>
                        <td>{s['pattern']}</td>
                    </tr>
            """
        
        html += """
                </table>
                <p><em>Automated signal - Trade at your own risk</em></p>
            </body>
        </html>
        """
        
        msg.attach(MIMEText(html, 'html'))
        
        # Send email
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
        
        print(f"Email sent to {EMAIL_RECEIVER}")
    except Exception as e:
        print(f"Email failed: {str(e)}")

# ========================
# AUTOMATED SCHEDULER
# ========================
def alert_scheduler():
    """Send signals every 4 hours (adjust as needed)"""
    while True:
        signals = generate_signals()
        send_email(signals)
        time.sleep(4 * 3600)  # 4 hours

# ========================
# FLASK API ENDPOINTS
# ========================
@app.route('/signals', methods=['GET'])
def signals():
    return jsonify({
        'signals': generate_signals(),
        'last_updated': datetime.utcnow().isoformat()
    })

@app.route('/trigger-email', methods=['GET'])
def manual_email():
    """Manually trigger email alert"""
    signals = generate_signals()
    send_email(signals)
    return jsonify({"status": "Email triggered"})

# ========================
# START APPLICATION
# ========================
if __name__ == '__main__':
    # Start background email scheduler
    scheduler = threading.Thread(target=alert_scheduler)
    scheduler.daemon = True
    scheduler.start()
    
    # Start web server
    app.run(host='0.0.0.0', port=80)
